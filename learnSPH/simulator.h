#pragma once
#include "particlesystem.h"
#include <CompactNSearch/CompactNSearch.h>


namespace learnSPH {
	namespace Simulator {
		/*
		 * Estimate the new motion state of all the particles of a fluid using the semi-implicit Euler.
		 * @param &fluid - Fluid for whose particles the motion update should be calculated.
		 * @param defaultTimeStep - Lower bound for the time step that should be used in the integration.
		 * @param &nsearch - Compact neighborhood information.
		 * @param epsilon - Scaling factor for velocity estimation in XSPH. 
		 */
		void semiImplicitEuler(ParticleSystem::FluidSystem& fluid, const double defaultTimeStep, const CompactNSearch::NeighborhoodSearch& nsearch, const double epsilon);
		
		/*
		 * Do a time consistent simulation, where a frame for every defaultTimeStep is generated by interpolating frames. Uses semi-implicit Euler.
		 * @param &fluid - Fluid for whose particles the motion update should be calculated.
		 * @param defaultTimeStep - Time step after which a frame is generated
		 * @param epsilon - Scaling factor for velocity estimation in XSPH.
		 * @param filename - Base name for the files that should store the particle position at different timesteps.
		 */
		void simulate(ParticleSystem::FluidSystem& fluid, std::vector<ParticleSystem::BoundarySystem>& boundaries, const double defaultTimeStep, const int simulationSteps, const int zSortSkip, const std::string fileBaseName);
	}
}